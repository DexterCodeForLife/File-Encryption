 /* This program is a student project designed by _______  */
package encryptionsystem;

import javax.swing.JFileChooser;
import java.io.File;
import javax.swing.ListModel;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.UIManager;

/**
 *
 * @author Peter
 */


public class EncriptionFrame extends javax.swing.JFrame {
    static int BUFFER_SIZE = 64;
    /**
     * Creates new form EncriptionFrame
     */
    private final ListModelObject model;
    
    public EncriptionFrame() {
        initComponents();
        model = new ListModelObject();
        this.jComboBox1.addItem("AES");
        this.jComboBox1.addItem("DES");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField1 = new javax.swing.JTextField();
        jButton3 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jPasswordField1 = new javax.swing.JPasswordField();
        jLabel2 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        jProgressBar1 = new javax.swing.JProgressBar();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Encrypto v1.0");
        setLocation(new java.awt.Point(200, 100));
        setLocationByPlatform(true);
        setResizable(false);

        jButton3.setText("Browse File...");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jPasswordField1.setMaximumSize(new java.awt.Dimension(6, 20));
        jPasswordField1.setName(""); // NOI18N

        jLabel2.setText("Encryption:");

        jLabel1.setText("Password:");

        jScrollPane1.setViewportView(jList1);

        jButton1.setText("Encrypt");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Decrypt");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButton1)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel1)
                        .addGap(21, 21, 21)))
                .addGap(31, 31, 31)
                .addComponent(jButton2)
                .addGap(8, 8, 8))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                            .addComponent(jLabel2)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPasswordField1, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(jProgressBar1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 369, Short.MAX_VALUE))
                    .addContainerGap()))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jComboBox1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 168, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jButton1))
                .addContainerGap())
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jPasswordField1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 20, Short.MAX_VALUE)
                        .addComponent(jLabel2))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(40, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 246, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, 127, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //encrypt file button
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        this.verifyInput();
        
        this.jProgressBar1.setIndeterminate(true);
         
        for( int i = 0; i != this.model.getSize(); i++){
            File file = new File(model.getFilePath(i));
            try {
                this.encryptFile(file);
            } catch (Exception ex) {
                Logger.getLogger(EncriptionFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        DexterCryptoUtils.processCompleted = false; //reset state
        this.jProgressBar1.setIndeterminate(false);
    }//GEN-LAST:event_jButton1ActionPerformed
    //browse files
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setMultiSelectionEnabled(true); //allow multi-selection of files
        fileChooser.showOpenDialog(this);

        
        fileName = fileChooser.getSelectedFiles();
        if(fileName.length == 0 )
            return;
        
        if( fileName.length == 1 ){ //if a single file is selected
          this.jTextField1.setText(fileName[0].getName());
          model.setElement(fileName[0].getName());
          model.setFilePath(fileName[0].getPath());
        }
        else // if multiple files are selected
        {
            this.jTextField1.setText(fileName[0].getParent());
            
            for( File file : fileName){
                 model.setElement(file.getName());
                 model.setFilePath(file.getPath());
            }
        }
        
        this.jList1.setModel(model);
        this.jList1.updateUI();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void verifyInput(){
        if( this.jPasswordField1.getPassword().length == 0){
            javax.swing.JOptionPane.showMessageDialog(rootPane, "Password is empty.", this.getTitle(),
                    JOptionPane.ERROR_MESSAGE);
            return;
        }
        //using Advance Encryption System
        switch(this.jComboBox1.getItemAt(this.jComboBox1.getSelectedIndex()).toString()){
            case "AES":
            case "DES":
                String pass = JOptionPane.showInputDialog(rootPane, "Re-enter password to verify", JOptionPane.OK_OPTION);
                
                if( !pass.equals(String.valueOf(jPasswordField1.getPassword())) ){
                    JOptionPane.showMessageDialog(rootPane, "Password entered don't match","Error with password",JOptionPane.ERROR_MESSAGE);
                    return;
                }
                if( this.jPasswordField1.getPassword().length <= 15 ){
                    
                    
                    JOptionPane.showMessageDialog(rootPane,"Your password must exceed 15 characters" 
                            ,this.getTitle(), JOptionPane.ERROR_MESSAGE);
                }
            break;
            default:
                ;
        }
    }
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        verifyInput();
        
        this.jProgressBar1.setIndeterminate(true);
              
        for( int i = 0; i != this.model.getSize(); i++){
            File file = new File(model.getFilePath(i));
            try {
               this.decryptFile(file);
            } catch (Exception ex) {
                Logger.getLogger(EncriptionFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        
        DexterCryptoUtils.processCompleted = false; //reset state
        this.jProgressBar1.setIndeterminate(false);
    }//GEN-LAST:event_jButton2ActionPerformed

    public static void main(String args[]) {
       
        try {
              javax.swing.UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EncriptionFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new EncriptionFrame().setVisible(true);
        });
    }
    
    private void encryptFile(File file) throws Exception{
        File encrptedFile = new File(file.getName() + ".encrypted");
        try{
            DexterCryptoUtils.encrypt(String.valueOf(this.jPasswordField1.getPassword()), file, encrptedFile);
        } catch(CryptoException ex){
            JOptionPane.showMessageDialog(rootPane, ex.getMessage());  
        }
    }
    
    private void decryptFile(File file) throws Exception{
        File decryptedFile = new File(getTypeFromFileName(file.getName()));
        try{
            DexterCryptoUtils.decrypt(String.valueOf(this.jPasswordField1.getPassword()), file, decryptedFile);
        } catch(CryptoException ex){
            JOptionPane.showMessageDialog(rootPane, ex.getMessage());  
        }
    }
    
    char[] fromByte(byte[] data){
        char[] buffer = new char[data.length];
        for(int i = 0; i != data.length; i++){
            buffer[i] = (char)data[i]; 
        }
        return buffer;
    }
    
    byte[] fromChar(char[] data){
        byte[] buffer = new byte[data.length];
        for(int i = 0; i != data.length; i++){
            buffer[i] = (byte)data[i]; 
        }
        return buffer;
    }
    
    String getTypeFromFileName(String name){
       
        if( !name.contains(".encrypted") ){
            return "_unknown_";
        }
        
        int pos = name.indexOf(".encrypted");
        String tmp = name.substring(0, pos);
        
        return tmp;
    }
    String filepath;
    File [] fileName;
    //list model for files selected
    ListModel<String> fileList;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JList jList1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPasswordField jPasswordField1;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
